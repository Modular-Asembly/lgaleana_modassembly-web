from typing import Any
from app.modassembly.models.user.User import User
from app.modassembly.users.utils.verify_password import verify_password
from app.modassembly.database.sql.get_sql_session import get_sql_session

def login_user(email: str, plain_password: str) -> str:
    """
    Logs in a user by querying the database for a user with the given email,
    verifying the provided plaintext password against the stored hashed password,
    and returning a token string on success. Raises a ValueError if the user is not found
    or the password is incorrect.
    """
    # Retrieve a database session using get_sql_session generator.
    for db in get_sql_session():
        user: Any = db.query(User).filter(User.email == email).first()
        if user is None:
            raise ValueError("User not found")
        if not verify_password(plain_password, user.hashed_password):
            raise ValueError("Incorrect password")
        # A simple token is generated by combining a constant secret from environment and user id.
        # In a production environment, use secure token generation (e.g., JWT).
        from os import environ
        secret_key: str = environ["SECRET_KEY"]
        token: str = f"{secret_key}-{user.id}"
        return token

    # This line should theoretically never be reached.
    raise RuntimeError("Database session could not be established")
